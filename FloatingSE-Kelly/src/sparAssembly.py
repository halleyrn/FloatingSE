from openmdao.main.api import Assembly
from openmdao.main.datatypes.api import Array
from openmdao.lib.drivers.api import COBYLAdriver
from spar import Spar
from mooring import Mooring
from towerRNA import TowerRNA


class SparAssembly(Assembly):
    """ Top level assembly """
    number_of_rings = Array([1, 4, 4, 20], iotype='in', desc='number of stiffeners in each section')
    wall_thickness = Array([0.05, 0.05, 0.05, 0.05], iotype='in', units='m', desc='wall thickness of each section')

    def configure(self):
        """Creates a new Assembly containing a chain of TowerRNA, Spar and
        Mooring components, as well as a constrained optimizer."""

        """Create optimizer instance."""
        self.add('driver', COBYLAdriver())
        self.driver.maxfun = 10000

        """Select component instances."""
        self.add('towerRNA', TowerRNA())
        self.add('spar', Spar())
        self.add('mooring', Mooring())

        """Define iteration hierarchy."""
        self.driver.workflow.add(['towerRNA', 'mooring', 'spar'])
        
        """Create a variable in the assembly and connects it to an internal
        component variable. If the variable is used again in a different 
        component instance, then it is manually connected."""
        self.create_passthrough('towerRNA.base_outer_diameter', 'tower_base_outer_diameter')
        self.create_passthrough('towerRNA.top_outer_diameter', 'tower_top_outer_diameter')
        self.create_passthrough('towerRNA.length', 'tower_length')
        self.create_passthrough('towerRNA.example_turbine_size', 'example_turbine_size')
        self.create_passthrough('towerRNA.RNA_center_of_gravity_y', 'RNA_center_of_gravity_y')
        self.create_passthrough('towerRNA.rotor_diameter', 'rotor_diameter')
        self.create_passthrough('towerRNA.cut_out_speed', 'cut_out_speed')
        self.create_passthrough('towerRNA.air_density', 'air_density')
        self.create_passthrough('towerRNA.RNA_center_of_gravity_x', 'RNA_center_of_gravity_x')
        self.create_passthrough('towerRNA.wind_reference_speed', 'wind_reference_speed')
        self.create_passthrough('towerRNA.wind_reference_height', 'wind_reference_height')
        self.create_passthrough('towerRNA.gust_factor', 'gust_factor')
        self.create_passthrough('towerRNA.tower_mass', 'tower_mass')
        self.create_passthrough('towerRNA.RNA_mass', 'RNA_mass')
        self.create_passthrough('towerRNA.user_tower_cg', 'user_tower_cg')

        self.connect('wall_thickness', 'spar.wall_thickness')
        self.connect('air_density', 'spar.air_density')
        self.connect('wind_reference_speed', 'spar.wind_reference_speed')
        self.connect('wind_reference_height', 'spar.wind_reference_height')
        self.connect('gust_factor', 'spar.gust_factor')
        self.create_passthrough('spar.alpha', 'alpha')
        self.connect('alpha', 'towerRNA.alpha')
        self.connect('RNA_center_of_gravity_x', 'spar.RNA_center_of_gravity_x')
        self.connect('tower_mass', 'spar.tower_mass')
        self.connect('RNA_mass', 'spar.RNA_mass')
        self.create_passthrough('spar.stiffener_index', 'stiffener_index')
        self.create_passthrough('spar.number_of_sections', 'number_of_sections')
        self.create_passthrough('spar.bulk_head', 'bulk_head')
        self.connect('number_of_rings', 'spar.number_of_rings')
        self.create_passthrough('spar.neutral_axis', 'neutral_axis')
        self.create_passthrough('spar.straight_col_cost', 'straight_col_cost')
        self.create_passthrough('spar.tapered_col_cost', 'tapered_col_cost')
        self.create_passthrough('spar.outfitting_cost', 'outfitting_cost')
        self.create_passthrough('spar.ballast_cost', 'ballast_cost')
        self.create_passthrough('spar.gravity', 'gravity')
        self.create_passthrough('spar.load_condition', 'load_condition')
        self.create_passthrough('spar.significant_wave_height', 'significant_wave_height')
        self.create_passthrough('spar.significant_wave_period', 'significant_wave_period')
        self.create_passthrough('spar.material_density', 'material_density')
        self.create_passthrough('spar.E', 'E')
        self.create_passthrough('spar.nu', 'nu')
        self.create_passthrough('spar.yield_stress', 'yield_stress')
        self.create_passthrough('spar.shell_mass_factor', 'shell_mass_factor')
        self.create_passthrough('spar.bulkhead_mass_factor', 'bulkhead_mass_factor')
        self.create_passthrough('spar.ring_mass_factor', 'ring_mass_factor')
        self.create_passthrough('spar.outfitting_factor', 'outfitting_factor')
        self.create_passthrough('spar.spar_mass_factor', 'spar_mass_factor')
        self.create_passthrough('spar.permanent_ballast_height', 'permanent_ballast_height')
        self.create_passthrough('spar.fixed_ballast_height', 'fixed_ballast_height')
        self.create_passthrough('spar.permanent_ballast_density', 'permanent_ballast_density')
        self.create_passthrough('spar.fixed_ballast_density', 'fixed_ballast_density')
        self.create_passthrough('spar.offset_amplification_factor', 'offset_amplification_factor')
        self.create_passthrough('spar.water_density', 'water_density')
        self.create_passthrough('spar.elevations', 'spar_elevations')
        self.create_passthrough('spar.outer_diameter', 'spar_outer_diameter')
        self.create_passthrough('spar.water_depth', 'water_depth')
        self.create_passthrough('spar.stiffener_curve_fit', 'stiffener_curve_fit')
        
        self.create_passthrough('mooring.fairlead_depth', 'fairlead_depth')
        self.connect('spar_elevations', ['towerRNA.spar_elevations', 'mooring.spar_elevations'])
        self.connect('spar_outer_diameter', 'mooring.spar_outer_diameter')
        self.create_passthrough('mooring.scope_ratio', 'scope_ratio')
        self.create_passthrough('mooring.pretension_percent', 'pretension_percent')
        self.create_passthrough('mooring.mooring_diameter', 'mooring_diameter')
        self.create_passthrough('mooring.number_of_mooring_lines', 'number_of_mooring_lines')
        self.connect('water_depth', 'mooring.water_depth')
        self.create_passthrough('mooring.mooring_type', 'mooring_type')
        self.create_passthrough('mooring.anchor_type', 'anchor_type')
        self.create_passthrough('mooring.fairlead_offset_from_shell', 'fairlead_offset_from_shell')
        self.create_passthrough('mooring.user_MBL', 'user_MBL')
        self.create_passthrough('mooring.user_WML', 'user_WML')
        self.create_passthrough('mooring.user_AE_storm', 'user_AE_storm')
        self.create_passthrough('mooring.user_MCPL', 'user_MCPL')
        self.create_passthrough('mooring.user_anchor_cost', 'user_anchor_cost')
        self.create_passthrough('mooring.misc_cost_factor', 'misc_cost_factor')
        self.create_passthrough('mooring.number_of_discretizations', 'number_of_discretizations')
        self.connect('water_density', 'mooring.water_density')
        
        """Connect outputs to inputs."""
        self.connect('towerRNA.RNA_keel_to_CG', 'spar.RNA_keel_to_CG')
        self.connect('towerRNA.tower_center_of_gravity', 'spar.tower_center_of_gravity')
        self.connect('towerRNA.tower_wind_force', 'spar.tower_wind_force')
        self.connect('towerRNA.RNA_wind_force', 'spar.RNA_wind_force')
        self.connect('mooring.mooring_total_cost', 'spar.mooring_total_cost')
        self.connect('mooring.mooring_keel_to_CG', 'spar.mooring_keel_to_CG')
        self.connect('mooring.mooring_vertical_load', 'spar.mooring_vertical_load')
        self.connect('mooring.mooring_horizontal_stiffness', 'spar.mooring_horizontal_stiffness')
        self.connect('mooring.mooring_vertical_stiffness', 'spar.mooring_vertical_stiffness')
        self.connect('mooring.sum_forces_x', 'spar.sum_forces_x')
        self.connect('mooring.offset_x', 'spar.offset_x')
        self.connect('mooring.damaged_mooring', 'spar.damaged_mooring')
        self.connect('mooring.intact_mooring', 'spar.intact_mooring')
        self.connect('mooring.mooring_mass', 'spar.mooring_mass')
        
        """Specify objective function (what you want to minimize)."""
        self.driver.add_objective('spar.spar_mass/1000000')
       
        """Design variables by adding a range of validity for certain variables."""
        self.driver.add_parameter('neutral_axis', low=10., high=41.9, scaler=0.01)
        # self.driver.add_parameter('number_of_rings[0]', low=1, high=5)
        self.driver.add_parameter('number_of_rings[1]', low=1, high=10)
        self.driver.add_parameter('number_of_rings[2]', low=1, high=10)
        self.driver.add_parameter('number_of_rings[3]', low=1, high=50)
        self.driver.add_parameter('wall_thickness[0]', low=2.54, high=10., scaler=0.01)
        self.driver.add_parameter('wall_thickness[1]', low=2.54, high=10., scaler=0.01)
        self.driver.add_parameter('wall_thickness[2]', low=2.54, high=10., scaler=0.01)
        self.driver.add_parameter('wall_thickness[3]', low=2.54, high=10., scaler=0.01)
        self.driver.add_parameter('scope_ratio', low=15., high=45., scaler=0.1)
        self.driver.add_parameter('pretension_percent', low=2.5, high=14.)
        self.driver.add_parameter('mooring_diameter', low=90., high=180., scaler=0.001)
        self.driver.add_parameter('fixed_ballast_height', low=10., high=100., scaler=0.1)
        self.driver.add_parameter('permanent_ballast_height', low=10., high=100., scaler=0.1)

        """Add constraints to the driver."""
        # self.driver.add_constraint('mooring_diameter > 0.09')
        # self.driver.add_constraint('wall_thickness[0] > 0.0254')
        # self.driver.add_constraint('wall_thickness[1] > 0.0254')
        # self.driver.add_constraint('wall_thickness[2] > 0.0254')
        # self.driver.add_constraint('wall_thickness[3] > 0.0254')
        # self.driver.add_constraint('pretension_percent < 14')
        self.driver.add_constraint('spar.water_ballast_height > 0.')
        self.driver.add_constraint('spar.flange_compactness < 1.')
        self.driver.add_constraint('spar.web_compactness < 1.')
        self.driver.add_constraint('spar.VAL[0] < 1.')
        self.driver.add_constraint('spar.VAL[1] < 1.')
        self.driver.add_constraint('spar.VAL[2] < 1.')
        self.driver.add_constraint('spar.VAL[3] < 1.')
        self.driver.add_constraint('spar.VAG[0] < 1.')
        self.driver.add_constraint('spar.VAG[1] < 1.')
        self.driver.add_constraint('spar.VAG[2] < 1.')
        self.driver.add_constraint('spar.VAG[3] < 1.')
        self.driver.add_constraint('spar.VEL[0] < 1.')
        self.driver.add_constraint('spar.VEL[1] < 1.')
        self.driver.add_constraint('spar.VEL[2] < 1.')
        self.driver.add_constraint('spar.VEL[3] < 1.')
        self.driver.add_constraint('spar.VEG[0] < 1.')
        self.driver.add_constraint('spar.VEG[1] < 1.')
        self.driver.add_constraint('spar.VEG[2] < 1.')
        self.driver.add_constraint('spar.VEG[3] < 1.')
        self.driver.add_constraint('spar.platform_stability_check < 1.')
        self.driver.add_constraint('spar.heel_angle <= 6.')
        self.driver.add_constraint('spar.min_offset_unity < 1.0')
        self.driver.add_constraint('spar.max_offset_unity < 1.0')


class SparAssemblyCalculation(SparAssembly):
    """This class inherits from the sparAssembly class. This means that it can
    inherit attributes and methods from sparAssembly. So the only difference is
    the configure, which we redefine below.""" 
    def configure(self):
        """Select component instances."""
        self.add('towerRNA', TowerRNA())
        self.add('spar', Spar())
        self.add('mooring', Mooring())

        """Define iteration hierarchy."""
        self.driver.workflow.add(['towerRNA', 'mooring', 'spar'])

        """Create a variable in the assembly and connects it to an internal
        component variable. If the variable is used again in a different 
        component instance, then it is manually connected."""
        self.create_passthrough('towerRNA.base_outer_diameter', 'tower_base_outer_diameter')
        self.create_passthrough('towerRNA.top_outer_diameter', 'tower_top_outer_diameter')
        self.create_passthrough('towerRNA.length', 'tower_length')
        self.create_passthrough('towerRNA.example_turbine_size', 'example_turbine_size')
        self.create_passthrough('towerRNA.RNA_center_of_gravity_y', 'RNA_center_of_gravity_y')
        self.create_passthrough('towerRNA.rotor_diameter', 'rotor_diameter')
        self.create_passthrough('towerRNA.cut_out_speed', 'cut_out_speed')
        self.create_passthrough('towerRNA.air_density', 'air_density')
        self.create_passthrough('towerRNA.RNA_center_of_gravity_x', 'RNA_center_of_gravity_x')
        self.create_passthrough('towerRNA.wind_reference_speed', 'wind_reference_speed')
        self.create_passthrough('towerRNA.wind_reference_height', 'wind_reference_height')
        self.create_passthrough('towerRNA.gust_factor', 'gust_factor')
        self.create_passthrough('towerRNA.tower_mass', 'tower_mass')
        self.create_passthrough('towerRNA.RNA_mass', 'RNA_mass')
        self.create_passthrough('towerRNA.user_tower_cg', 'user_tower_cg')

        self.connect('wall_thickness', 'spar.wall_thickness')
        self.connect('air_density', 'spar.air_density')
        self.connect('wind_reference_speed', 'spar.wind_reference_speed')
        self.connect('wind_reference_height', 'spar.wind_reference_height')
        self.connect('gust_factor', 'spar.gust_factor')
        self.create_passthrough('spar.alpha', 'alpha')
        self.connect('alpha', 'towerRNA.alpha')
        self.connect('RNA_center_of_gravity_x', 'spar.RNA_center_of_gravity_x')
        self.connect('tower_mass', 'spar.tower_mass')
        self.connect('RNA_mass', 'spar.RNA_mass')
        self.create_passthrough('spar.stiffener_index', 'stiffener_index')
        self.create_passthrough('spar.number_of_sections', 'number_of_sections')
        self.create_passthrough('spar.bulk_head', 'bulk_head')
        self.connect('number_of_rings', 'spar.number_of_rings')
        self.create_passthrough('spar.neutral_axis', 'neutral_axis')
        self.create_passthrough('spar.straight_col_cost', 'straight_col_cost')
        self.create_passthrough('spar.tapered_col_cost', 'tapered_col_cost')
        self.create_passthrough('spar.outfitting_cost', 'outfitting_cost')
        self.create_passthrough('spar.ballast_cost', 'ballast_cost')
        self.create_passthrough('spar.gravity', 'gravity')
        self.create_passthrough('spar.load_condition', 'load_condition')
        self.create_passthrough('spar.significant_wave_height', 'significant_wave_height')
        self.create_passthrough('spar.significant_wave_period', 'significant_wave_period')
        self.create_passthrough('spar.material_density', 'material_density')
        self.create_passthrough('spar.E', 'E')
        self.create_passthrough('spar.nu', 'nu')
        self.create_passthrough('spar.yield_stress', 'yield_stress')
        self.create_passthrough('spar.shell_mass_factor', 'shell_mass_factor')
        self.create_passthrough('spar.bulkhead_mass_factor', 'bulkhead_mass_factor')
        self.create_passthrough('spar.ring_mass_factor', 'ring_mass_factor')
        self.create_passthrough('spar.outfitting_factor', 'outfitting_factor')
        self.create_passthrough('spar.spar_mass_factor', 'spar_mass_factor')
        self.create_passthrough('spar.permanent_ballast_height', 'permanent_ballast_height')
        self.create_passthrough('spar.fixed_ballast_height', 'fixed_ballast_height')
        self.create_passthrough('spar.permanent_ballast_density', 'permanent_ballast_density')
        self.create_passthrough('spar.fixed_ballast_density', 'fixed_ballast_density')
        self.create_passthrough('spar.offset_amplification_factor', 'offset_amplification_factor')
        self.create_passthrough('spar.water_density', 'water_density')
        self.create_passthrough('spar.elevations', 'spar_elevations')
        self.create_passthrough('spar.outer_diameter', 'spar_outer_diameter')
        self.create_passthrough('spar.water_depth', 'water_depth')
        self.create_passthrough('spar.stiffener_curve_fit', 'stiffener_curve_fit')

        self.create_passthrough('mooring.fairlead_depth', 'fairlead_depth')
        self.connect('spar_elevations', ['towerRNA.spar_elevations', 'mooring.spar_elevations'])
        self.connect('spar_outer_diameter', 'mooring.spar_outer_diameter')
        self.create_passthrough('mooring.scope_ratio', 'scope_ratio')
        self.create_passthrough('mooring.pretension_percent', 'pretension_percent')
        self.create_passthrough('mooring.mooring_diameter', 'mooring_diameter')
        self.create_passthrough('mooring.number_of_mooring_lines', 'number_of_mooring_lines')
        self.connect('water_depth', 'mooring.water_depth')
        self.create_passthrough('mooring.mooring_type', 'mooring_type')
        self.create_passthrough('mooring.anchor_type', 'anchor_type')
        self.create_passthrough('mooring.fairlead_offset_from_shell', 'fairlead_offset_from_shell')
        self.create_passthrough('mooring.user_MBL', 'user_MBL')
        self.create_passthrough('mooring.user_WML', 'user_WML')
        self.create_passthrough('mooring.user_AE_storm', 'user_AE_storm')
        self.create_passthrough('mooring.user_MCPL', 'user_MCPL')
        self.create_passthrough('mooring.user_anchor_cost', 'user_anchor_cost')
        self.create_passthrough('mooring.misc_cost_factor', 'misc_cost_factor')
        self.create_passthrough('mooring.number_of_discretizations', 'number_of_discretizations')
        self.connect('water_density', 'mooring.water_density')

        """Connect outputs to inputs."""
        self.connect('towerRNA.RNA_keel_to_CG', 'spar.RNA_keel_to_CG')
        self.connect('towerRNA.tower_center_of_gravity', 'spar.tower_center_of_gravity')
        self.connect('towerRNA.tower_wind_force', 'spar.tower_wind_force')
        self.connect('towerRNA.RNA_wind_force', 'spar.RNA_wind_force')
        self.connect('mooring.mooring_total_cost', 'spar.mooring_total_cost')
        self.connect('mooring.mooring_keel_to_CG', 'spar.mooring_keel_to_CG')
        self.connect('mooring.mooring_vertical_load', 'spar.mooring_vertical_load')
        self.connect('mooring.mooring_horizontal_stiffness', 'spar.mooring_horizontal_stiffness')
        self.connect('mooring.mooring_vertical_stiffness', 'spar.mooring_vertical_stiffness')
        self.connect('mooring.sum_forces_x', 'spar.sum_forces_x')
        self.connect('mooring.offset_x', 'spar.offset_x')
        self.connect('mooring.damaged_mooring', 'spar.damaged_mooring')
        self.connect('mooring.intact_mooring', 'spar.intact_mooring')
        self.connect('mooring.mooring_mass', 'spar.mooring_mass')
